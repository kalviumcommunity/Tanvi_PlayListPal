import streamlit as st
import os
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(page_title="Playlist Pal Pro", layout="wide")

# ---------- Global Theme / CSS ---------
THEME_CSS = """
<style>
:root {
  --bg: #0e1322; --panel:#0f162a; --panel-2:#121a32; --panel-3:#0b1226;
  --brand:#22d3ee; --brand2:#a78bfa; --ok:#10b981; --text:#e5e7eb; --muted:#a8b1c7;
  --card-radius:16px; --shadow: 0 8px 30px rgba(2,6,23,.25);
}

html, body, [data-testid="stAppViewContainer"] {
  background: radial-gradient(1200px 600px at 0% 0%, #0b1226, #0e1322) !important;
}
* { font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Cantarell, Ubuntu, Noto Sans, Arial; }

/* Shell panel */
[data-testid="stAppViewContainer"] > div:first-child { padding-top: 10px; }
.container-panel { background: linear-gradient(180deg, #0f1528, #0e1427); border-radius: 14px; box-shadow: var(--shadow); padding: 14px; }

/* Navbar */
.nav { display:flex; align-items:center; justify-content:space-between; background:#0b1224; border-radius: 14px; padding: 10px 14px; box-shadow: var(--shadow); }
.brand { display:flex; align-items:center; gap:10px; color:var(--text); font-weight:800; font-size:18px; }
.brand .pro { color:#10b981; }
.tabs { display:flex; gap:22px; margin-left: 24px; }
.tab { color:var(--muted); text-decoration:none; font-weight:600; position:relative; padding:6px 2px; }
.tab.active { color:var(--text); }
.tab.active:after { content:""; position:absolute; left:0; right:0; bottom:-6px; height:3px; border-radius:3px; background:linear-gradient(90deg, var(--brand), var(--brand2)); }
.search { background:#0f172a; border:1px solid #202a48; border-radius: 10px; padding:6px 10px; color:var(--text); }
.avatar { width:32px; height:32px; border-radius:999px; background:#1f2937; display:inline-block; box-shadow: inset 0 0 0 2px #223;
}

/* Cards */
.card { background:#0f162a; border-radius: var(--card-radius); padding: 18px; box-shadow: var(--shadow); color:var(--text); }
.card-dark { background:#0d1426; }
.card h3, .card h4 { margin: 0 0 10px 0; }
.sub { color: var(--muted); font-size: 13px; }

/* Buttons */
.stButton>button, .stLinkButton button {
  border:none; border-radius:10px; padding:10px 14px; font-weight:700; color:#06121a;
  background:linear-gradient(90deg, var(--ok), var(--brand)); box-shadow: 0 8px 24px rgba(34,211,238,.25);
}
.stButton>button:hover, .stLinkButton button:hover { filter:brightness(1.06); }
.btn-ghost .stButton>button { background:#151c35; color:#e5e7eb; box-shadow:none; }

/* Recent Playlists */
.grid { display:grid; grid-template-columns: repeat(6, minmax(0, 1fr)); gap:14px; }
.tile { background:#0e152b; border-radius:12px; padding:10px; box-shadow: var(--shadow); }
.cover { width:120px; height:120px; border-radius:10px; object-fit:cover; background:#0b1226; display:block; }
.title { max-width:120px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; color:#e9edf5; font-size:12.5px; margin-top:6px; }

/* Footer */
.footer { color:#cbd5e1; font-size:12px; opacity:.9; }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# ---------- State ----------
if "route" not in st.session_state:
    st.session_state.route = "home"

# Env
google_key = os.getenv("GOOGLE_API_KEY")
spotify_id = os.getenv("SPOTIPY_CLIENT_ID")
spotify_redirect = os.getenv("SPOTIPY_REDIRECT_URI", "https://tanviplaylistpal.streamlit.app/callback")

# ---------- Navbar (brand + tabs + search + avatar) ----------
nb1, nb2 = st.columns([7,5])
with nb1:
    active = st.session_state.route
    st.markdown(f"""
    <div class=\"nav\"> 
      <div style=\"display:flex;align-items:center;gap:18px;\">
        <div class=\"brand\">🎵 Playlist Pal <span class=\"pro\">Pro</span></div>
        <div class=\"tabs\">
          <span class=\"tab {'active' if active=='home' else ''}\">Home</span>
          <span class=\"tab {'active' if active=='demos' else ''}\">AI Demos</span>
          <span class=\"tab {'active' if active=='analytics' else ''}\">Analytics</span>
        </div>
      </div>
      <div style=\"display:flex;align-items:center;gap:10px;\">
        <input class=\"search\" placeholder=\"Search\" />
        <span class=\"avatar\"></span>
      </div>
    </div>
    """, unsafe_allow_html=True)
with nb2:
    cH,cD,cA = st.columns(3)
    if cH.button("Home", use_container_width=True): st.session_state.route = "home"
    if cD.button("AI Demos", use_container_width=True): st.session_state.route = "demos"
    if cA.button("Analytics", use_container_width=True): st.session_state.route = "analytics"

from llm_services import get_playlist_details, get_playlist_details_with_error
from spotify_service import (
    SpotifyPlaylistManager,
    create_complete_playlist_from_ai,
    get_spotify_auth_url,
)
import analytics_engine
import plotly.graph_objects as go

APP_MARKER = "generated by playlist pal ai"

# Helpers
def fetch_recent_playlists(limit: int = 12):
    """Return only playlists created by this app, recognized by description marker."""
    try:
        m = SpotifyPlaylistManager()
        if not m.is_authenticated():
            return []
        items = m.get_user_playlists(limit=50) or []
        filtered = []
        for p in items:
            desc = (p.get("description") or "").lower()
            if APP_MARKER in desc:
                img = (p.get("images") or [{}])[0].get("url")
                filtered.append({
                    "name": p.get("name"),
                    "image": img,
                    "url": p.get("external_urls",{}).get("spotify"),
                })
            if len(filtered) >= limit:
                break
        return filtered
    except Exception:
        return []

# Donut helper
def donut(value: int, color: str):
    fig = go.Figure(data=[go.Pie(values=[value,100-value], hole=.7, sort=False, direction='clockwise',
                                 marker_colors=[color,'#1f2a44'], textinfo='none')])
    fig.update_layout(height=180, width=180, margin=dict(l=0,r=0,t=0,b=0), paper_bgcolor='#0d1426')
    return fig

# ---------- Views ----------
if st.session_state.route == "home":
    left, right = st.columns([2,1])
    with left:
        st.markdown("<div class='card card-dark'><h3>Welcome Back, Tanvi</h3><div class='sub'>Transform your music discovery experience with AI‑powered curation.</div></div>", unsafe_allow_html=True)
        q1,q2,q3 = st.columns([1,1,1])
        if q1.button("Create New Playlist", use_container_width=True): st.session_state.route = "demos"
        if q2.button("Explore AI Demos", use_container_width=True): st.session_state.route = "demos"
        if q3.button("View Spotify Playlists", use_container_width=True): st.session_state.route = "playlists"
    with right:
        st.markdown("<div class='card card-dark'><h4>Your Daily Stats</h4></div>", unsafe_allow_html=True)
        g1,g2 = st.columns(2)
        with g1:
            st.plotly_chart(donut(150*100//200, "#22d3ee"), use_container_width=True)
            st.caption("Tracks Analyzed")
        with g2:
            st.plotly_chart(donut(98, "#a78bfa"), use_container_width=True)
            st.caption("AI Success Rate")

    st.markdown("<div class='sub' style='margin:8px 0 6px;'>Recent Playlists</div>", unsafe_allow_html=True)
    recents = fetch_recent_playlists()
    if recents:
        cols = st.columns(6)
        row_idx = 0
        for i, item in enumerate(recents):
            with cols[i%6]:
                if item["image"]: st.image(item["image"], width=120)
                else: st.markdown("<div class='cover'></div>", unsafe_allow_html=True)
                st.markdown(f"<div class='title'>{item['name'] or 'Playlist'}</div>", unsafe_allow_html=True)
                if item.get("url"): st.link_button("Open", item["url"], use_container_width=True)
            if i%6==5 and i+1<len(recents): cols = st.columns(6); row_idx += 1
    else:
        st.info("No playlists created by Playlist Pal yet. Generate one from AI Demos!")

    st.markdown("<div class='sub' style='margin:8px 0 6px;'>AI Performance Snapshot</div>", unsafe_allow_html=True)
    snap = go.Figure()
    snap.add_trace(go.Scatter(x=["Jan","Feb","Mar","Apr","May"], y=[20,40,80,120,130], mode="lines+markers", line=dict(color="#22d3ee")))
    snap.update_layout(height=260, margin=dict(l=8,r=8,t=8,b=8), template="plotly_dark", paper_bgcolor="#0d1426", plot_bgcolor="#0d1426")
    st.plotly_chart(snap, use_container_width=True)

elif st.session_state.route == "playlists":
    st.subheader("Your Playlists created by Playlist Pal")
    m = SpotifyPlaylistManager()
    if not m.is_authenticated():
        st.warning("Please authenticate with Spotify to load playlists.")
        st.link_button("Authenticate Spotify", get_spotify_auth_url(), use_container_width=True)
    else:
        items = m.get_user_playlists(limit=50) or []
        filtered = [p for p in items if APP_MARKER in (p.get("description") or "").lower()]
        data = [{"Name": p.get("name"), "Tracks": p.get("tracks",{}).get("total","-"), "Open": p.get("external_urls",{}).get("spotify")} for p in filtered]
        if not data:
            st.info("No playlists created yet. Use AI Demos to create one.")
        else:
            st.dataframe(data, use_container_width=False, width=1200)

elif st.session_state.route == "demos":
    st.subheader("Generate a Playlist with AI")
    b1,b2,b3 = st.columns(3)
    with b1: st.markdown(f"<span class='sub'>Google API: {'Connected' if google_key else 'Missing'}</span>", unsafe_allow_html=True)
    with b2: st.markdown(f"<span class='sub'>Spotify: {'Found' if spotify_id else 'Missing'}</span>", unsafe_allow_html=True)
    with b3: st.caption(f"Redirect URI: {spotify_redirect}")

    prompt = st.text_input("Describe your vibe or playlist idea", placeholder="e.g., upbeat indie pop for a morning run")
    c1,c2,c3 = st.columns([2,1,1])
    with c1: max_tracks = st.number_input("Max tracks", 5, 50, 25, 5)
    with c2: create_on_spotify = st.checkbox("Create on Spotify", value=bool(spotify_id))
    with c3: public_playlist = st.checkbox("Public playlist", value=True)

    if st.button("Generate", use_container_width=True):
        if not prompt.strip():
            st.warning("Please enter a prompt.")
        else:
            with st.spinner("Asking AI for playlist details..."):
                data, err = get_playlist_details_with_error(prompt)
            if err:
                st.error(f"Gemini error: {err}")
            elif not data:
                st.error("Failed to get playlist details from AI.")
            else:
                st.success("AI playlist details ready")
                st.json({"playlist_name": data.get("playlist_name"), "playlist_description": data.get("playlist_description"), "search_terms": data.get("search_terms", [])})
                if create_on_spotify:
                    m = SpotifyPlaylistManager()
                    if not m.is_authenticated():
                        st.warning("Authenticate with Spotify, then click Generate again.")
                        st.link_button("Authenticate Spotify", get_spotify_auth_url(), use_container_width=True)
                    else:
                        with st.spinner("Creating playlist on Spotify..."):
                            res = create_complete_playlist_from_ai(m, data, int(max_tracks))
                        if res:
                            st.balloons(); st.success(f"Created playlist: {res['playlist_name']}"); st.link_button("Open in Spotify", res["spotify_url"], use_container_width=True)

elif st.session_state.route == "analytics":
    st.subheader("Analytics")
    # KPI donuts
    k1,k2,k3 = st.columns(3)
    with k1:
        st.markdown("<div class='card card-dark'><h4>Total Sessions</h4>", unsafe_allow_html=True)
        st.plotly_chart(donut(92, "#22d3ee"), use_container_width=True)
        st.caption("1,247")
        st.markdown("</div>", unsafe_allow_html=True)
    with k2:
        st.markdown("<div class='card card-dark'><h4>Playlists Generated</h4>", unsafe_allow_html=True)
        st.plotly_chart(donut(88, "#10b981"), use_container_width=True)
        st.caption("1,198")
        st.markdown("</div>", unsafe_allow_html=True)
    with k3:
        st.markdown("<div class='card card-dark'><h4>Success Rate</h4>", unsafe_allow_html=True)
        st.plotly_chart(donut(96, "#a78bfa"), use_container_width=True)
        st.caption("96.1%")
        st.markdown("</div>", unsafe_allow_html=True)

    # Charts
    lc, rc = st.columns([2,1])
    with lc:
        st.markdown("<div class='sub'>Response Time (ms)</div>", unsafe_allow_html=True)
        line = go.Figure()
        line.add_trace(go.Scatter(x=["Jan","Feb","Mar","Apr","May"], y=[220,180,160,140,120], mode="lines+markers", line=dict(color="#22d3ee")))
        line.update_layout(height=280, margin=dict(l=8,r=8,t=8,b=8), template="plotly_dark", paper_bgcolor="#0d1426", plot_bgcolor="#0d1426")
        st.plotly_chart(line, use_container_width=True)
    with rc:
        st.markdown("<div class='sub'>Top Genre Match</div>", unsafe_allow_html=True)
        bar = go.Figure()
        bar.add_trace(go.Bar(x=["Lo‑fi","Indie","EDM","Pop"], y=[86,74,61,58], marker_color=["#a78bfa","#22d3ee","#10b981","#64748b"]))
        bar.update_layout(height=280, margin=dict(l=8,r=8,t=8,b=8), template="plotly_dark", paper_bgcolor="#0d1426", plot_bgcolor="#0d1426")
        st.plotly_chart(bar, use_container_width=True)

    st.markdown("<div class='sub'>Recent Activity</div>", unsafe_allow_html=True)
    activity = [
        {"Time":"10:22","Event":"User generated workout playlist"},
        {"Time":"10:18","Event":"Embedding calculation completed"},
        {"Time":"10:05","Event":"Spotify playlist created"},
        {"Time":"09:59","Event":"Similarity analysis performed"},
    ]
    st.dataframe(activity, use_container_width=False, width=900)

# Footer
st.markdown("<div class='container-panel footer'>Built with ❤️ by Tanvi</div>", unsafe_allow_html=True)
